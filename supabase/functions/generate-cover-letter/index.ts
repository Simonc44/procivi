import { serve } from "https://deno.land/std@0.190.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2.45.0";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

const logStep = (step: string, details?: any) => {
  console.log(`[GENERATE-COVER-LETTER] ${step}${details ? ` - ${JSON.stringify(details)}` : ''}`);
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    logStep("Starting cover letter generation");

    const supabaseClient = createClient(
      Deno.env.get("SUPABASE_URL") ?? "",
      Deno.env.get("SUPABASE_ANON_KEY") ?? ""
    );

    const authHeader = req.headers.get("Authorization");
    if (!authHeader) throw new Error("No authorization header");

    const token = authHeader.replace("Bearer ", "");
    const { data: userData, error: userError } = await supabaseClient.auth.getUser(token);
    if (userError) throw new Error(`Auth error: ${userError.message}`);
    const user = userData.user;
    if (!user) throw new Error("User not authenticated");

    logStep("User authenticated", { userId: user.id });

    // Check subscription
    const { data: subscription } = await supabaseClient
      .from('subscriptions')
      .select('plan_type')
      .eq('user_id', user.id)
      .single();

    if (subscription?.plan_type !== 'premium') {
      throw new Error('Premium subscription required for cover letter generation');
    }

    const { jobTitle, companyName, jobDescription, userExperience } = await req.json();
    
    // Get user profile
    const { data: profile } = await supabaseClient
      .from('profiles')
      .select('*')
      .eq('user_id', user.id)
      .single();

    logStep("Retrieved user profile and subscription");

    // Generate cover letter with Gemini
    const geminiApiKey = Deno.env.get('GEMINI_API_KEY');
    if (!geminiApiKey) throw new Error('Gemini API key not configured');

    const prompt = `Generate a professional cover letter based on the following information:

    Personal Information:
    - Name: ${profile?.first_name || ''} ${profile?.last_name || ''}
    - Email: ${profile?.email || ''}
    - Phone: ${profile?.phone || ''}
    - Location: ${profile?.location || ''}

    Job Information:
    - Position: ${jobTitle}
    - Company: ${companyName}
    - Job Description: ${jobDescription}

    User Experience:
    ${userExperience}

    Please generate a compelling, personalized cover letter that:
    1. Shows enthusiasm for the specific role and company
    2. Highlights relevant experience and achievements
    3. Demonstrates knowledge of the company and position
    4. Includes a strong opening and closing
    5. Is professional yet engaging
    6. Matches the candidate's experience to job requirements

    Format the letter properly with date, salutation, body paragraphs, and professional closing.
    Return only the cover letter text, no additional formatting.`;

    logStep("Calling Gemini API for cover letter");

    const geminiResponse = await fetch(
      `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp:generateContent?key=${geminiApiKey}`,
      {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          contents: [{
            parts: [{ text: prompt }]
          }]
        })
      }
    );

    if (!geminiResponse.ok) {
      throw new Error(`Gemini API error: ${geminiResponse.status}`);
    }

    const geminiData = await geminiResponse.json();
    const generatedContent = geminiData.candidates?.[0]?.content?.parts?.[0]?.text;

    if (!generatedContent) {
      throw new Error('No content generated by Gemini');
    }

    logStep("Generated cover letter with Gemini");

    // Save cover letter to database
    const { data: coverLetter, error: coverLetterError } = await supabaseClient
      .from('cover_letters')
      .insert({
        user_id: user.id,
        job_title: jobTitle,
        company_name: companyName,
        content: userExperience,
        generated_content: generatedContent
      })
      .select()
      .single();

    if (coverLetterError) throw new Error(`Database error: ${coverLetterError.message}`);

    logStep("Cover letter saved to database", { coverLetterId: coverLetter.id });

    // Log generation
    await supabaseClient
      .from('generation_logs')
      .insert({
        user_id: user.id,
        type: 'cover_letter',
        model_used: 'gemini-2.0-flash',
        status: 'completed'
      });

    return new Response(JSON.stringify({
      success: true,
      coverLetter: coverLetter,
      generated_content: generatedContent
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      status: 200,
    });

  } catch (error) {
    logStep("ERROR", { message: error.message });
    return new Response(JSON.stringify({ error: error.message }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      status: 500,
    });
  }
});