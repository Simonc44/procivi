import { serve } from "https://deno.land/std@0.190.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2.45.0";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

const logStep = (step: string, details?: any) => {
  console.log(`[GENERATE-CV] ${step}${details ? ` - ${JSON.stringify(details)}` : ''}`);
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    logStep("Starting CV generation");

    const supabaseClient = createClient(
      Deno.env.get("SUPABASE_URL") ?? "",
      Deno.env.get("SUPABASE_ANON_KEY") ?? ""
    );

    const authHeader = req.headers.get("Authorization");
    if (!authHeader) throw new Error("No authorization header");

    const token = authHeader.replace("Bearer ", "");
    const { data: userData, error: userError } = await supabaseClient.auth.getUser(token);
    if (userError) throw new Error(`Auth error: ${userError.message}`);
    const user = userData.user;
    if (!user) throw new Error("User not authenticated");

    logStep("User authenticated", { userId: user.id });

    const { cvData, templateType = 'modern' } = await req.json();
    
    // Get user profile
    const { data: profile } = await supabaseClient
      .from('profiles')
      .select('*')
      .eq('user_id', user.id)
      .single();

    logStep("Retrieved user profile", { profileId: profile?.id });

    // Generate CV content with Gemini
    const geminiApiKey = Deno.env.get('GEMINI_API_KEY');
    if (!geminiApiKey) throw new Error('Gemini API key not configured');

    const prompt = `Generate a professional CV content based on the following information:
    
    Personal Information:
    - Name: ${profile?.first_name || ''} ${profile?.last_name || ''}
    - Email: ${profile?.email || ''}
    - Phone: ${profile?.phone || ''}
    - Location: ${profile?.location || ''}
    - LinkedIn: ${profile?.linkedin_url || ''}

    CV Data:
    ${JSON.stringify(cvData, null, 2)}

    Template Type: ${templateType}

    Please generate a professional, well-structured CV content in HTML format that highlights the candidate's strengths and achievements. Focus on:
    1. Professional summary
    2. Key skills and competencies
    3. Work experience with achievements
    4. Education and certifications
    5. Additional relevant sections

    Return only the HTML content, no markdown formatting.`;

    logStep("Calling Gemini API");

    const geminiResponse = await fetch(
      `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp:generateContent?key=${geminiApiKey}`,
      {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          contents: [{
            parts: [{ text: prompt }]
          }]
        })
      }
    );

    if (!geminiResponse.ok) {
      throw new Error(`Gemini API error: ${geminiResponse.status}`);
    }

    const geminiData = await geminiResponse.json();
    const generatedContent = geminiData.candidates?.[0]?.content?.parts?.[0]?.text;

    if (!generatedContent) {
      throw new Error('No content generated by Gemini');
    }

    logStep("Generated content with Gemini");

    // Save CV to database
    const { data: newCV, error: cvError } = await supabaseClient
      .from('cvs')
      .insert({
        user_id: user.id,
        title: cvData.title || `CV - ${new Date().toLocaleDateString()}`,
        content: cvData,
        template_type: templateType,
        generated_content: generatedContent,
        status: 'completed'
      })
      .select()
      .single();

    if (cvError) throw new Error(`Database error: ${cvError.message}`);

    logStep("CV saved to database", { cvId: newCV.id });

    // Log generation
    await supabaseClient
      .from('generation_logs')
      .insert({
        user_id: user.id,
        type: 'cv',
        model_used: 'gemini-2.0-flash',
        status: 'completed'
      });

    return new Response(JSON.stringify({
      success: true,
      cv: newCV,
      generated_content: generatedContent
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      status: 200,
    });

  } catch (error) {
    logStep("ERROR", { message: error.message });
    return new Response(JSON.stringify({ error: error.message }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      status: 500,
    });
  }
});